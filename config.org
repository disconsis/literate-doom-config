#+TITLE: Literate Doom Config
#+AUTHOR: Ketan Kanishka (ketan.kanishka@nyu.edu)
#+PROPERTY: header-args :results none

Enable lexical binding for performance
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t; -*-
#+END_SRC

* Ideas
Improvement ideas go here.

* Utility functions
Making theme customizations requires duplicating the code in two places: on startup and in =doom-load-theme-hook= (to survive theme changes). A simple utility macro prevents manual duplication.
#+begin_src emacs-lisp
(defmacro modify-theme! (&rest body)
  "Macro which enables theme modifications to persist theme changes.
Runs its body right away and also adds it to `doom-load-theme-hook'."
  `(progn ,@body
          (add-hook! 'doom-load-theme-hook ,@body)))
#+end_src

* Look
** Font
Doom uses a number of font variables for customizing different things.
=doom-font= is the standard font. Since emacs 28, ligatures are composed automatically, so we use a font which has those. Some good options are:
- JetBrains Mono
- Iosevka Term
- Monoid
- Overpass Mono

There's a few other non-ligature retro fonts which are also nice:
- Victor Mono
- Curie

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Iosevka Term" :weight 'light :size 15))
#+END_SRC


Next comes the variable-pitch font. This is mostly used for text-based modes like org.
I use variable-pitch faces in org through =mixed-pitch-mode=, which only applies it to the appropriate faces and makes the others fixed-pitch. So the choice of variable-pitch font must play well with the choice of fixed-pitch (standard) font.
For some reason, setting =doom-variable-pitch-font= first makes =variable-pitch-mode= have no effect (although setting it after =variable-pitch-mode= is enabled and calling =doom/reload-font= makes it take effect). The default font (Verdana) is already really nice, so we'll let this be for now.
I'll list good options anyway for posterity:
- Verdana (the default)
- Aleo
- Helvetica Neue
- ET Book / ET Bembo

NOTE: Earlier, setting =doom-variable-pitch-font= made =variable-pitch-mode= not use it, for some reason. This seems to not be the case anymore, but I have no idea why.

#+begin_src emacs-lisp
(setq doom-variable-pitch-font (font-spec :family "Aleo" :weight 'regular))
#+end_src

Other font settings are:
- =doom-unicode-font= which is the fallback font for unicode glyphs
- =doom-unicode-extra-fonts= which is for unicode overrides over the fallback
- =doom-big-font= which is used for presentations with =doom-big-font-mode=
The defaults for all of these are pretty good (the last one defaulting to the default =doom-font=)

** Theme
=doom-themes= provides a number of excellent themes like:
- doom-one
- doom-tomorrow-night
- doom-dracula
- doom-sourcerer
- doom-nord
- doom-moonlight

Aside from those:
- =tao-yang= is an excellent monochrome light theme, but it's too bright to use in the evenings (insert light-theme joke...)

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-moonlight)
#+END_SRC

Changing the theme with =counsel-load-theme= has one downside - you can't see the currently active theme.
However, some themes like =solaire-swap-bg-theme= are always loaded (at least in my setup), but these aen't something I want to know about each time I try to change themes. For this we set a list of ignores.
#+begin_src emacs-lisp
(defvar my/counsel-load-theme-ignore-prefixes '("solaire-")
  "Prefix of themes to ignore when displaying the current theme with `my/counsel-load-theme-showing-current'.")
#+end_src

We'll make a slight modification to =counsel-load-them= to display the current theme.
#+begin_src emacs-lisp
(defun my/counsel-load-theme-showing-current ()
  "Minor modification of `counsel-load-theme' to show current theme.
Forward to `load-theme' while showing the currently loaded themes.
Usable with `ivy-resume', `ivy-next-line-and-call' and `ivy-previous-line-and-call'."
  (interactive)
  (let* ((enabled-themes (mapcar #'symbol-name custom-enabled-themes))
         (should-ignore (lambda (theme)
                          (-any-p (lambda (prefix) (s-prefix-p prefix theme)) my/counsel-load-theme-ignore-prefixes)))
         (enabled-themes-without-ignores (-remove should-ignore enabled-themes))
         (enabled-theme-string (if enabled-themes-without-ignores
                                   (s-join ", " enabled-themes-without-ignores)
                                 "nil")))
    (ivy-read (format "Load custom theme [current: %s]: " enabled-theme-string)
              (mapcar 'symbol-name
                      (custom-available-themes))
              :action #'counsel-load-theme-action
              :caller 'counsel-load-theme)))
#+end_src

We can change the binding of =counsel-load-theme= to point to our function instead.
NOTE: I wanted to use the =[remap counsel-load-theme]= syntax here to make the keybinding independent of whatever =counsel-load-theme= is actually bound to, but that doesn't work since =counsel-load-theme= is bound by remapping =load-theme=, and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Remapping-Commands.html][remapped bindings don't propagate through multiple levels]].
NOTE: =:desc= keys seem to only take effect with /prefixes/ (and not /maps/) with =map!=. (=:leader= is an alias for a =:prefix= property.)
#+begin_src emacs-lisp
(map! :leader
      :desc "change theme" "h t" #'my/counsel-load-theme-showing-current)
#+end_src

** Pretty symbols
The prettified symbols for quotes are pretty lackluster. We'll use slightly bigger unicode characters to make them stand out.
#+begin_src emacs-lisp
(when (featurep! :ui pretty-code)
  (plist-put! +pretty-code-symbols :quote "" :quote_end ""))
#+end_src

** Banner
The startup banner image is customizable, and the default text-based banner could stand to look a little bit better.
[[https://github.com/search?q=setq+%2Bdoom-dashboard-banner-file&type=Code][Searching github for banners]] yielded 4 pages of results - most of them slight variations on the same image. I collected some of the more interesting ones in [[file:banners/][banners/]].
#+begin_src emacs-lisp
(setq +doom-dashboard-banner-dir (expand-file-name "banners" doom-private-dir)
      +doom-dashboard-banner-file "ue.png")
#+end_src

* Evil
** Window commands
By default, windows split to the left and top, which is quite unintuitive (maybe due to English readers' left-to-right bias?)
#+begin_src emacs-lisp
(after! evil
  (setq evil-split-window-below t
        evil-vsplit-window-right t))
#+end_src

I almost always /know/ which evil state I'm in, otherwise a quick ~C-[~ (~ESC~) sets that right. So I don't really care for all the indicators scattered around the UI. The most basic (c.f. ugly) of these is the one in the echo area, so let's at least turn that off.
#+begin_src emacs-lisp
(after! evil
  (setq evil-echo-state nil))
#+end_src

=vim-vinegar= allows a lot of dexterity in quickly jumping around the filesystem, with just a few settings. We'll replicate some of that here.
The most important part is switching to the current directory with a single key press: ~-~
#+begin_src emacs-lisp
(after! dired
  (map! :n "-" #'dired-jump))
#+end_src

The details in =dired= create a lot of visual clutter and it's rarely needed, so we'll turn it off at the start. If required, it's easily accessible through ~(~.
#+begin_src emacs-lisp
(after! dired
  (add-hook 'dired-mode-hook #'dired-hide-details-mode))
#+end_src

** Unimpaired-style keys
I'm quite used to turning search highlights on and off with ~[ h~ and ~] h~. In Doom these move between headings in org-mode, but the same action can also be done with ~C-j~ and ~C-k~, so we can safely remap them.
#+begin_src emacs-lisp
(after! evil
  (defun my/evil-search-hl-on ()
    "Turn on persistent evil search highlights and re-highlight the previous search."
    (interactive)
    (setq evil-ex-search-highlight-all t)
    (save-excursion (evil-ex-search-next)))

  (defun my/evil-search-hl-off ()
    "Turn off persisten evil search highlights and disable any current highlights."
    (interactive)
    (setq evil-ex-search-highlight-all t)
    (evil-ex-nohighlight))

  (map! :n "[ h" #'my/evil-search-hl-off
        :n "] h" #'my/evil-search-hl-on))
#+end_src

* Org-mode
org-mode forms the base of this config, so some quick improvements are sorely needed.

** Blocks
First, some templates are needed to quickly add source blocks.
#+BEGIN_SRC emacs-lisp
(after! org
  (pushnew! org-structure-template-alist
            '("el" . "src emacs-lisp")
            '("hs" . "src haskell")
            '("py" . "src python")
            '("sh" . "src shell")))
#+END_SRC

** Libraries
=org-tempo= needs to be loaded for template expansions like =<el= to work. Inline tasks are also incredibly useful. =org-inlinetask= needs to be loaded for this.
Since these take a decent amount of time to load and are not /immediately/ required, we can defer their loading. We /don't/ need to guard this with an =after! org= block since they're only loaded when emacs is idle.
#+begin_src emacs-lisp
(doom-load-packages-incrementally '(org-tempo org-inlinetask))
#+end_src

** Look
Since org is a text-based mode, it is only natural to use variable-pitch fonts with it. However, source blocks and the like should use fixed-pitch fonts. =mixed-pitch-mode= solves this problem.
We might as well enable this is in all text-based modes. The =mixed-pitch= package resides in the =:ui/zen= module, so that must be enabled for this to work.
#+begin_src emacs-lisp
(when (featurep! :ui zen)
  (add-hook! 'text-mode-hook #'mixed-pitch-mode))
#+end_src

Line numbers also do not make a lot of sense for text-based modes. Doom adds a hook to enable them in text-mode, so we remove that to reduce computation.
#+begin_src emacs-lisp
(remove-hook! 'text-mode-hook #'display-line-numbers-mode)
(add-hook! 'text-mode-hook :append (setq-local display-line-numbers nil))
#+end_src

Emphasis markers clutter up the text, so we turn it off.
#+begin_src emacs-lisp
(after! org
  (setq org-hide-emphasis-markers t))
#+end_src

The default ellipsis looks pretty bad, so add a cool unicode one!
Good options here are:
- ⬎
- 
#+begin_src emacs-lisp
(after! org
  (setq org-ellipsis "  "))
#+end_src

Make the ellipsis the same color as the headline.
#+begin_src emacs-lisp
(after! org
  (modify-theme! (set-face-attribute 'org-ellipsis nil :foreground 'unspecified)))
#+end_src

I like adding empty lines between headlines to keep things neatly organized, but org folds those up along with the block. This prevent this from happening.
#+begin_src emacs-lisp
(after! org
  (setq org-cycle-separator-lines -1))
#+end_src

By default the title uses the normal font and height, just in bold. We can make the font a little prettier and hide a few keywords.
#+begin_src emacs-lisp
(setq +org-title-font "FARRAY")
(setq +org-title-height 3.0)

(after! org
  (pushnew! org-hidden-keywords 'title 'author)
  (modify-theme! (set-face-attribute 'org-document-title nil :family +org-title-font :height +org-title-height)))
#+end_src

When I was using the default variable-pitch font, I spruced up headings by changing the font. Now that I'm using a better font for everything this doesn't seem as neccessary, but I'll leave this code here in case I want to change the heading font again.
#+begin_src emacs-lisp
(defvar +org-heading-font nil
  "Font family to use for org headings.")
(defvar +org-heading-height 1.2
  "Height multiplier to use for org headings")

(after! org
  (modify-theme!
   (when (or +org-heading-font +org-heading-height)
     (dolist (lvl (number-sequence 1 8))
       (let ((face (intern (concat "org-level-" (number-to-string lvl)))))
         (when +org-heading-font (set-face-attribute face nil :family +org-heading-font))
         (when +org-heading-height (set-face-attribute face nil :height +org-heading-height)))))))
#+end_src

The first few default bullets are okay, but the later ones look a bit ugly. The progression of bullets is also not very uniform.
#+begin_src emacs-lisp
(after! org-superstar
  (setq org-superstar-headline-bullets-list '("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷")))
#+end_src

We can also display bullets as checkmarks for todo headings.
#+begin_src emacs-lisp
(after! org-superstar
  (setq org-superstar-special-todo-items t))
#+end_src

** Checkers
Text-based modes /should/ have both spelling and grammar checks. For technical writing however, I find I spend my time teaching the spell checker more than anything else. A better dictionary than =aspell= is obviously required.
*************** TODO Find a better dictionary for technical writing
*************** END
In the meantime, we'll turn off spell-checking by default.
#+begin_src emacs-lisp
(after! org
  (remove-hook! 'org-mode-hook #'flyspell-mode))
#+end_src

*** TODO add bindings for toggling writegood and langtool

** Notes
Using packages like =org-roam=, =org-noter=, =org-ref=; it's possible to build a good workflow for quickly searching, taking notes, and connecting papers.
[[https://www.reddit.com/r/emacs/comments/gz4lk8/org_brain_and_org_roam/ftf00ky][This comment by u/Cantos]] describes a really nice implementation of this.

First of all, set the directory for the notes. I use Dropbox to back them up and possibly access them on mobile.
I know that =org-directory= needs to be set before org loads, and the same is probably also true for =org-roam-directory=; so *don't* put this in an =after!= block.
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/org")
(setq org-roam-directory (expand-file-name "roam" org-directory))
#+end_src

=org-roam= allows customizing where the titles of a particular file are extracted from. It can optionally use the /first/ heading for this, which seems a bit untuitive to me, so we'll remove that as a source.
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-title-source '(title alias)))
#+end_src

The backlinks buffer is set to the right be default, which takes up a lot of the screen width. Roam research puts it at the bottom, so let's try that out for size. We'll also make this a bit smaller than normal to save more space for the main buffer.
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-buffer-position 'bottom)
  (setq org-roam-buffer-height 0.20))
#+end_src

*** Setting up org-protocol
org-protocol needs to be set up for =org-roam= to capture requests from anywhere in the system (including the org-roam graph).

The following library also needs to be loaded for this to work. This is only sensible for =emacsclient=.
#+begin_src emacs-lisp
(after! server
  (when server-process
    (require 'org-roam-protocol)))
#+end_src

This is accomplished by the following script. Note that the executable needs to be =emacsclient= and not =emacs= since the =org-roam-protocol= library needs to be loaded before this is called.
#+begin_src sh :tangle no
echo "[Desktop Entry]
Name=Org-Protocol
Exec=emacsclient -c %u
Icon=emacs
Type=Application
Terminal=false
MimeType=x-scheme-handler/org-protocol" > ~/.local/share/applications/org-protocol.desktop

xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
#+end_src

**** TODO Change file name template to just the title
Having the date in the file name just clutters it up.

**** TODO Install =org-roam-server= for more interactive graphs

* Spacemacsy keybindings
Make some keybindings a bit more like Spacemacs.
~SPC :~ (=M-x=) in particular is really hard to hit for such a commonly-used command.
#+begin_src emacs-lisp
(map! :leader
      :n "SPC" #'counsel-M-x
      :n ";"   #'pp-eval-expression)
#+end_src

Like Spacemacs, Doom maps =localleader= to ~SPC m~, but unlike Spacemacs, does not allow accessing it through ~,~
We set its insert-mode counterpart to ~C-,~ , which doesn't do anything important by default.
#+begin_src emacs-lisp
(setq doom-localleader-key ","
      doom-localleader-alt-key "C-,")
#+end_src

* Quit without confirmation
I almost always end up confirming, so this gets tedious quickly. In any case Doom's quick startup time means I can be back to my session in 2 seconds after quitting. Similarly, I don't really care what processes are running. There's always a few REPLs and shells lying around. After these changes, the only time quitting requires confirmation is when modified buffers exist.
#+begin_src emacs-lisp
(setq confirm-kill-emacs nil
      confirm-kill-processes nil)
#+end_src

* Version control
If I'm trying to commit unstaged changes, I'm usually aware of what I'm doing, but =magit= asks for confirmation each time. Might as well turn this off.
#+begin_src emacs-lisp
(after! magit
  (setq magit-commit-ask-to-stage 'stage))
#+end_src

"Status" sections like "Recent commits" are sometimes collapsed on calling =magit-status=.  It's nice to not have to do that. Stashes are hidden by default, let's keep it that way.
#+begin_src emacs-lisp
(after! magit
  (setq magit-section-initial-visibility-alist '((status . show)
                                                 (stash . hide))))
#+end_src

The =magit-delta= package provides nice syntax-highlighted diffs through the [[https://github.com/dandavison/delta][delta]] pager. =delta= is obviously a requirement here.
#+begin_src emacs-lisp
(use-package! magit-delta
  :after magit
  :config
  ;; from what I can gather, this only needs to be called once
  (magit-delta-mode))
#+end_src

The in-buffer stage and revert commands ask for confirmation, which severely reduces their usability. We can turn this off.
#+begin_src emacs-lisp
(after! git-gutter
  (setq git-gutter:ask-p nil))
#+end_src

** TODO Allow staging and reverting of partial/multiple chunks in-buffer through visual selections
This works in Spacemacs and magit diffs, but not in the buffer of the file itself. It's quite useful, so try to make it work.

** TODO Increase fringe-width in magit buffers to be able to show section collapse indicators

* Language-specific settings
** Shell
Shell programs typically only need to look for documentation through man pages. Anything more complicated than that is probably not going to be searchable through a keyword alone. We set the documentation lookup handler accordingly. Either =man= or =woman= would work here, but since they are interactive commands, when called as lookup handlers they ask the user for input instead of just using the one passed to them. To get around this we wrap them in a lambda.
#+begin_src emacs-lisp
(after! sh-script
  (defun my/woman-non-interactive ;; sexist
      (topic) (woman topic))

  (set-lookup-handlers! 'sh-mode
    :documentation '(my/woman-non-interactive)))
#+end_src

* Filesystem
It's irritating to have to copy and paste a filename from a file just to open it. =find-file-at-point= accomplishes this. Note that this is different from =org-open-at-point=, since I want to follow filenames in strings as well.
#+begin_src emacs-lisp
(map! :map doom-leader-file-map
      "." #'find-file-at-point)
#+end_src
