#+TITLE: Literate Doom Config
#+AUTHOR: Ketan Kanishka (ketan.kanishka@nyu.edu)
#+PROPERTY: header-args :results none

Enable lexical binding for performance
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t; -*-
#+END_SRC

* Ideas
** TODO Build a good workflow for research
Using packages like =org-roam=, =org-noter=, =org-ref=; it's possible to build a good workflow for quickly searching, taking notes, and connecting papers.
[[https://www.reddit.com/r/emacs/comments/gz4lk8/org_brain_and_org_roam/ftf00ky][This comment by u/Cantos]] describes a really nice implementation of this.

* Look
** Font
Doom uses a number of font variables for customizing different things.
=doom-font= is the standard font. Since emacs 28, ligatures are composed automatically, so we use a font which has those. Some good options are:
- JetBrains Mono
- Iosevka Term
- Monoid
- Overpass Mono

There's a few other non-ligature retro fonts which are also nice:
- Victor Mono
- Curie

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Iosevka Term" :weight 'light :size 15))
#+END_SRC


Next comes the variable-pitch font. This is mostly used for text-based modes like org.
I use variable-pitch faces in org through =mixed-pitch-mode=, which only applies it to the appropriate faces and makes the others fixed-pitch. So the choice of variable-pitch font must play well with the choice of fixed-pitch (standard) font.
For some reason, setting =doom-variable-pitch-font= first makes =variable-pitch-mode= have no effect (although setting it after =variable-pitch-mode= is enabled and calling =doom/reload-font= makes it take effect). The default font (Verdana) is already really nice, so we'll let this be for now.
I'll list good options anyway for posterity:
- Verdana (the default)
- Aleo
- Helvetica Neue
- ET Book / ET Bembo
*************** TODO Find out why setting =doom-variable-pitch-font= makes =variable-pitch-mode= fail
*************** END

Other font settings are:
- =doom-unicode-font= which is the fallback font for unicode glyphs
- =doom-unicode-extra-fonts= which is for unicode overrides over the fallback
- =doom-big-font= which is used for presentations with =doom-big-font-mode=
The defaults for all of these are pretty good (the last one defaulting to the default =doom-font=)

** Theme
=doom-themes= provides a number of excellent themes like:
- doom-one
- doom-tomorrow-night
- doom-dracula
- doom-sourcerer

Aside from those:
- =tao-yang= is an excellent monochrome light theme, but it's too bright to use in the evenings (insert light-theme joke...)

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-tomorrow-night)
#+END_SRC

* Evil
** Window commands
By default, windows split to the left and top, which is quite unintuitive (maybe due to English readers' left-to-right bias?)
#+begin_src emacs-lisp
(after! evil
  (setq evil-split-window-below t
        evil-vsplit-window-right t))
#+end_src

I almost always /know/ which evil state I'm in, otherwise a quick ~C-[~ (~ESC~) sets that right. So I don't really care for all the indicators scattered around the UI. The most basic (c.f. ugly) of these is the one in the echo area, so let's at least turn that off.
#+begin_src emacs-lisp
(after! evil
  (setq evil-echo-state nil))
#+end_src

=vim-vinegar= allows a lot of dexterity in quickly jumping around the filesystem, with just a few settings. We'll replicate some of that here.
The most important part is switching to the current directory with a single key press: ~-~
#+begin_src emacs-lisp
(after! dired
  (map! :n "-" #'dired-jump))
#+end_src

The details in =dired= create a lot of visual clutter and it's rarely needed, so we'll turn it off at the start. If required, it's easily accessible through ~(~.
#+begin_src emacs-lisp
(after! dired
  (add-hook 'dired-mode-hook #'dired-hide-details-mode))
#+end_src

** Unimpaired-style keys
I'm quite used to turning search highlights on and off with ~[ h~ and ~] h~. In Doom these move between headings in org-mode, but the same action can also be done with ~C-j~ and ~C-k~, so we can safely remap them.
#+begin_src emacs-lisp
(after! evil
  (defun my/evil-search-hl-on ()
    "Turn on persistent evil search highlights and re-highlight the previous search."
    (interactive)
    (setq evil-ex-search-highlight-all t)
    (save-excursion (evil-ex-search-next)))

  (defun my/evil-search-hl-off ()
    "Turn off persisten evil search highlights and disable any current highlights."
    (interactive)
    (setq evil-ex-search-highlight-all t)
    (evil-ex-nohighlight))

  (map! :n "[ h" #'my/evil-search-hl-off
        :n "] h" #'my/evil-search-hl-on))
#+end_src

* Org-mode
org-mode forms the base of this config, so some quick improvements are sorely needed.

** Blocks
First, some templates are needed to quickly add source blocks.
#+BEGIN_SRC emacs-lisp
(after! org
  (pushnew! org-structure-template-alist
            '("el" . "src emacs-lisp")
            '("hs" . "src haskell")
            '("py" . "src python")
            '("sh" . "src shell")))
#+END_SRC

** Libraries
=org-tempo= needs to be loaded for template expansions like =<el= to work.
#+begin_src emacs-lisp
(after! org
  (load "org-tempo"))
#+end_src

Inline tasks are also incredibly useful. =org-inlinetask= needs to be loaded for this.
#+begin_src emacs-lisp
(after! org
  (load "org-inlinetask"))
#+end_src

** Look
Since org is a text-based mode, it is only natural to use variable-pitch fonts with it. However, source blocks and the like should use fixed-pitch fonts. =mixed-pitch-mode= solves this problem.
We might as well enable this is in all text-based modes. The =mixed-pitch= package resides in the =:ui/zen= module, so that must be enabled for this to work.
#+begin_src emacs-lisp
(when (featurep! :ui zen)
  (add-hook! 'text-mode-hook #'mixed-pitch-mode))
#+end_src

Line numbers also do not make a lot of sense for text-based modes. Doom adds a hook to enable them in text-mode, so we remove that to reduce computation.
#+begin_src emacs-lisp
(remove-hook! 'text-mode-hook #'display-line-numbers-mode)
(add-hook! 'text-mode-hook :append (setq-local display-line-numbers nil))
#+end_src

Emphasis markers clutter up the text, so we turn it off.
#+begin_src emacs-lisp
(after! org
  (setq org-hide-emphasis-markers t))
#+end_src

The default ellipsis looks pretty bad, so add a cool unicode one!
Good options here are:
- ⬎
- 
#+begin_src emacs-lisp
(after! org
  (setq org-ellipsis "  "))
#+end_src

Make the ellipsis the same color as the headline.
#+begin_src emacs-lisp
(after! org
  (modify-theme! (set-face-attribute 'org-ellipsis nil :foreground 'unspecified)))
#+end_src

I like adding empty lines between headlines to keep things neatly organized, but org folds those up along with the block. This prevent this from happening.
#+begin_src emacs-lisp
(after! org
  (setq org-cycle-separator-lines -1))
#+end_src

By default the title uses the normal font and height, just in bold. We can make the font a little prettier and hide a few keywords.
#+begin_src emacs-lisp
(after! org
  (pushnew! org-hidden-keywords 'title 'author)
  (modify-theme! (set-face-attribute 'org-document-title nil :family "FARRAY" :height 3.0)))
#+end_src

** Checkers
Text-based modes /should/ have both spelling and grammar checks. For technical writing however, I find I spend my time teaching the spell checker more than anything else. A better dictionary than =aspell= is obviously required.
*************** TODO Find a better dictionary for technical writing
*************** END
In the meantime, we'll turn off spell-checking by default.
#+begin_src emacs-lisp
(after! org
  (remove-hook! 'org-mode-hook #'flyspell-mode))
#+end_src

*** TODO add bindings for toggling writegood and langtool

* Spacemacsy keybindings
Make some keybindings a bit more like Spacemacs.
~SPC :~ (=M-x=) in particular is really hard to hit for such a commonly-used command.
#+begin_src emacs-lisp
(map! :leader
      :n "SPC" #'counsel-M-x
      :n ";"   #'pp-eval-expression)
#+end_src

Like Spacemacs, Doom maps =localleader= to ~SPC m~, but unlike Spacemacs, does not allow accessing it through ~,~
We set its insert-mode counterpart to ~C-,~ , which doesn't do anything important by default.
#+begin_src emacs-lisp
(setq doom-localleader-key ","
      doom-localleader-alt-key "C-,")
#+end_src

* Quit without confirmation
I almost always end up confirming, so this gets tedious quickly. In any case Doom's quick startup time means I can be back to my session in 2 seconds after quitting. Similarly, I don't really care what processes are running. There's always a few REPLs and shells lying around. After these changes, the only time quitting requires confirmation is when modified buffers exist.
#+begin_src emacs-lisp
(setq confirm-kill-emacs nil
      confirm-kill-processes nil)
#+end_src

* Version control
If I'm trying to commit unstaged changes, I'm usually aware of what I'm doing, but =magit= asks for confirmation each time. Might as well turn this off.
#+begin_src emacs-lisp
(after! magit
  (setq magit-commit-ask-to-stage 'stage))
#+end_src

"Status" sections like "Recent commits" are sometimes collapsed on calling =magit-status=.  It's nice to not have to do that. Stashes are hidden by default, let's keep it that way.
#+begin_src emacs-lisp
(after! magit
  (setq magit-section-initial-visibility-alist '((status . show)
                                                 (stash . hide))))
#+end_src

The =magit-delta= package provides nice syntax-highlighted diffs through the [[https://github.com/dandavison/delta][delta]] pager. =delta= is obviously a requirement here.
#+begin_src emacs-lisp
(after! magit
  (magit-delta-mode))
#+end_src

* Language-specific settings
** Shell
Shell programs typically only need to look for documentation through man pages. Anything more complicated than that is probably not going to be searchable through a keyword alone. We set the documentation lookup handler accordingly. Either =man= or =woman= would work here, but since they are interactive commands, when called as lookup handlers they ask the user for input instead of just using the one passed to them. To get around this we wrap them in a lambda.
#+begin_src emacs-lisp
(after! sh-script
  (defun my/woman-non-interactive ;; sexist
      (topic) (woman topic))

  (set-lookup-handlers! 'sh-mode
    :documentation '(my/woman-non-interactive)))
#+end_src

* Utility functions
Making theme customizations requires duplicating the code in two places: on startup and in =doom-load-theme-hook= (to survive theme changes). A simple utility macro prevents manual duplication.
#+begin_src emacs-lisp
(defmacro modify-theme! (&rest body)
  "Macro which enables theme modifications to persist theme changes.
Runs its body right away and also adds it to `doom-load-theme-hook'."
  `(progn ,@body
          (add-hook! 'doom-load-theme-hook ,@body)))
#+end_src
